# Generated by Django 4.1 on 2023-12-24 17:57

import ckeditor_uploader.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Slug', unique=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('en_title', models.CharField(help_text='Enter news title', max_length=100, verbose_name='English title')),
                ('uk_title', models.CharField(help_text='Enter news title', max_length=100, verbose_name='Ukrainian title')),
                ('en_content', ckeditor_uploader.fields.RichTextUploadingField(help_text='Enter news content', verbose_name='English content')),
                ('uk_content', ckeditor_uploader.fields.RichTextUploadingField(help_text='Enter news content', verbose_name='Ukrainian content')),
                ('date_of_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date of creation')),
            ],
            options={
                'ordering': ['-date_of_creation', 'en_title'],
            },
        ),
        migrations.CreateModel(
            name='LibraryAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(help_text='Slug', unique=True, validators=[django.core.validators.MaxLengthValidator(50)])),
                ('en_full_name', models.CharField(help_text='Enter full name on english', max_length=45, unique=True, verbose_name='Full name on english')),
                ('uk_full_name', models.CharField(help_text='Enter full name on ukrainian', max_length=45, verbose_name='Full name on ukrainian')),
            ],
            options={
                'verbose_name_plural': 'Library authors',
            },
        ),
        migrations.CreateModel(
            name='LibraryMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(max_length=100, verbose_name='First name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last name')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='E-mail')),
                ('phone_number', models.CharField(max_length=20, unique=True, verbose_name='Phone number')),
                ('institution', models.CharField(max_length=200, verbose_name='Higher Education or Research Institution')),
                ('department', models.CharField(max_length=200, verbose_name='Research Unit/Department/Chair')),
                ('specialization', models.CharField(max_length=200, verbose_name='Scientific Specialization')),
                ('specialization_code', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(100)])),
                ('education_level', models.CharField(choices=[('1', 'Master'), ('2', 'Doctor or PhD'), ('3', 'Postgraduate'), ('4', 'Doctorate')], max_length=1, verbose_name='Level of education')),
                ('supervisor', models.CharField(blank=True, max_length=200, null=True, verbose_name='Academic Supervisor/Consultant')),
                ('google_scholar', models.CharField(blank=True, max_length=200, null=True, verbose_name='ORCHID/Google Scholar')),
                ('resume', models.FileField(blank=True, null=True, upload_to='uploads/Library Members Resumes', verbose_name='Academic CV')),
                ('resource_plans', models.TextField(max_length=600, verbose_name='Resource Plans')),
                ('date_of_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date of creation')),
            ],
            options={
                'verbose_name_plural': 'Library members',
                'ordering': ['-date_of_creation', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='NewsType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('Opinion', 'Opinion'), ('Events', 'Events'), ('News', 'News'), ('Op-eds', 'Op-eds'), ('Analytics', 'Analytics')], help_text='Enter news type', max_length=25, unique=True, verbose_name='News type')),
                ('slug', models.SlugField(help_text='Slug', unique=True)),
            ],
            options={
                'verbose_name_plural': 'News Types',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='uploads/blog-scholars', verbose_name='Photo of the represent')),
                ('en_full_name', models.CharField(help_text='Enter full name on english', max_length=45, verbose_name='Full name on english')),
                ('uk_full_name', models.CharField(help_text='Enter full name on ukrainian', max_length=45, verbose_name='Full name on ukrainian')),
                ('en_position', models.TextField(help_text='Enter position', max_length=255, verbose_name='English position')),
                ('uk_position', models.TextField(help_text='Enter position', max_length=255, verbose_name='Ukrainian position')),
                ('date_of_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date of creation')),
            ],
            options={
                'ordering': ['-date_of_creation'],
            },
        ),
        migrations.CreateModel(
            name='PolicyArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter policy area name', max_length=25, unique=True, verbose_name='Policy area name')),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'verbose_name_plural': 'Policy areas',
            },
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('en_name', models.CharField(default='Books', help_text='Enter English name', max_length=50, verbose_name='English name')),
                ('uk_name', models.CharField(default='Книги', help_text='Enter Ukrainian name', max_length=50, verbose_name='Ukrainian name')),
                ('banner', models.ImageField(upload_to='uploads/library_banners', verbose_name='Resource banner')),
            ],
            options={
                'verbose_name_plural': 'Resource types',
            },
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=False, verbose_name='Is Active')),
                ('mailing_language', models.CharField(choices=[('en', 'English'), ('uk', 'Ukrainian')], max_length=2)),
                ('date_of_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date of creation')),
            ],
            options={
                'verbose_name_plural': 'Subscribers',
                'ordering': ['-date_of_creation', 'email'],
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('en_title', models.CharField(help_text='Enter video title', max_length=100, verbose_name='English title')),
                ('uk_title', models.CharField(help_text='Enter video title', max_length=100, verbose_name='Ukrainian title')),
                ('type', models.CharField(choices=[('pc', 'Podcasts'), ('vd', 'Videos')], help_text='Choose video type', max_length=2)),
                ('url', models.URLField(help_text='Video URL path', verbose_name='URL')),
                ('date_of_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date of creation')),
            ],
            options={
                'verbose_name_plural': 'Video content',
                'ordering': ['-date_of_creation', 'type'],
            },
        ),
        migrations.CreateModel(
            name='BlogScholar',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.person')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('slug', models.SlugField(unique=True)),
                ('link', models.URLField(help_text='Enter link', verbose_name='University link')),
            ],
            options={
                'verbose_name_plural': 'Blog Scholars',
                'ordering': ('order',),
                'abstract': False,
            },
            bases=('blog.person', models.Model),
        ),
        migrations.CreateModel(
            name='GeneralMember',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.person')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('en_name', models.CharField(help_text='Enter name', max_length=100, verbose_name='English name')),
                ('uk_name', models.CharField(help_text='Enter name', max_length=100, verbose_name='Ukrainian name')),
                ('banner', models.ImageField(upload_to='uploads/general-members', verbose_name='Member banner')),
                ('link', models.URLField(help_text='Enter link', verbose_name='Member link')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date of creation')),
                ('is_rounded', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'General Members',
                'ordering': ('order',),
                'abstract': False,
            },
            bases=('blog.person', models.Model),
        ),
        migrations.CreateModel(
            name='LibraryResource',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.article')),
                ('banner', models.ImageField(upload_to='uploads/library_banners', verbose_name='Resource banner')),
                ('file', models.FileField(blank=True, help_text='Only for Books, Brochures and other.', null=True, upload_to='uploads/resources', verbose_name='Resource file')),
                ('pages', models.PositiveIntegerField(blank=True, help_text='Only for Books.', null=True)),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date of creation')),
                ('author', models.ForeignKey(blank=True, help_text='Only for Books.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='books', to='blog.libraryauthor', verbose_name='Author')),
                ('type', models.ForeignKey(help_text='Choose resource type', on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='blog.resourcetype', verbose_name='Resource type')),
            ],
            options={
                'verbose_name_plural': 'Library resources',
            },
            bases=('blog.article',),
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.person')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='E-mail')),
                ('slug', models.SlugField(unique=True)),
                ('en_content', ckeditor_uploader.fields.RichTextUploadingField(help_text='Enter news content', verbose_name='English content')),
                ('uk_content', ckeditor_uploader.fields.RichTextUploadingField(help_text='Enter news content', verbose_name='Ukrainian content')),
            ],
            options={
                'verbose_name_plural': 'Team Members',
                'ordering': ('order',),
                'abstract': False,
            },
            bases=('blog.person', models.Model),
        ),
        migrations.CreateModel(
            name='Subresource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='uploads/subresources', verbose_name='Subresource file')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date of creation')),
                ('topic', models.CharField(help_text='Enter topic', max_length=45, unique=True, verbose_name='Topic')),
                ('bounded_resource', models.ForeignKey(help_text='Choose bounded resource', on_delete=django.db.models.deletion.CASCADE, related_name='subresources', to='blog.libraryresource', verbose_name='Bounded resource')),
            ],
            options={
                'verbose_name_plural': 'Subresources',
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.article')),
                ('banner', models.ImageField(upload_to='uploads/banners', verbose_name='News banner')),
                ('en_subtitle', models.TextField(help_text='Enter subtitle', max_length=200, verbose_name='English subtitle')),
                ('uk_subtitle', models.TextField(help_text='Enter subtitle', max_length=200, verbose_name='Ukrainian subtitle')),
                ('author', models.ForeignKey(blank=True, help_text='Select an author if needed', null=True, on_delete=django.db.models.deletion.PROTECT, to='blog.teammember', verbose_name='Author')),
                ('policy_area', models.ForeignKey(default='Foreign policy', help_text='Choose policy area', on_delete=django.db.models.deletion.PROTECT, to='blog.policyarea', verbose_name='Policy area')),
                ('type', models.ForeignKey(default='News', help_text='Choose news type', on_delete=django.db.models.deletion.PROTECT, to='blog.newstype', verbose_name='Type')),
            ],
            options={
                'verbose_name_plural': 'News',
            },
            bases=('blog.article',),
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='blog.article')),
                ('author', models.ForeignKey(help_text='Choose blog scholar', on_delete=django.db.models.deletion.PROTECT, to='blog.blogscholar', verbose_name='Author')),
            ],
            options={
                'verbose_name_plural': 'Blog Articles',
            },
            bases=('blog.article',),
        ),
    ]
